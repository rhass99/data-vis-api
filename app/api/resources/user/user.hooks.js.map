{"version":3,"sources":["../../../../src/api/resources/user/user.hooks.js"],"names":["createUser","clientUserAccount","userCheck","db","UserAccount","findOne","where","email","encrypt","hashPassword","existsError","Error","err","sequelize","Promise","reject"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA;AACA,MAAMA,aAAa,MAAOC,iBAAP,IAA6B;AAC9C,MAAI;AACF;AACA,UAAMC,YAAY,MAAMC,gBAAGC,WAAH,CAAeC,OAAf,CAAuB,EAAEC,OAAO,EAAEC,OAAON,kBAAkBM,KAA3B,EAAT,EAAvB,CAAxB;AACA;AACA,QAAI,CAACL,SAAL,EAAgB;AACd,aAAOM,kBAAQC,YAAR,CAAqBR,iBAArB,CAAP;AACD;AACD,UAAMS,cAAc,IAAIC,KAAJ,CAAU,qBAAV,CAApB;AACA,UAAMD,WAAN;AACD,GATD,CASE,OAAOE,GAAP,EAAY;AACZ,WAAOT,gBAAGU,SAAH,CAAaC,OAAb,CAAqBC,MAArB,CAA4BH,GAA5B,CAAP;AACD;AACF,CAbD;;kBAee;AACbZ;AADa,C","file":"user.hooks.js","sourcesContent":["import db from '../../../models/index';\nimport encrypt from '../../modules/encrypt';\n\n// Create a new user on signup after checking existance in DB\nconst createUser = async (clientUserAccount) => {\n  try {\n    // Check UserAccount already exists in DB\n    const userCheck = await db.UserAccount.findOne({ where: { email: clientUserAccount.email } });\n    // If UserAccount is new, add it to DB and return it.\n    if (!userCheck) {\n      return encrypt.hashPassword(clientUserAccount);\n    }\n    const existsError = new Error('User already exists');\n    throw existsError;\n  } catch (err) {\n    return db.sequelize.Promise.reject(err);\n  }\n};\n\nexport default {\n  createUser,\n};"]}