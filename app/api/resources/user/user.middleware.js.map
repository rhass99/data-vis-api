{"version":3,"sources":["../../../../src/api/resources/user/user.middleware.js"],"names":["createUser","req","res","next","data","db","UserAccount","create","body","generatedToken","jw","jwtSign","id","status","exists","locals","token","user_existed","err","loginUser","userCheck","findOne","where","email","isRegistered","encrypt","checkUserAccountPass","password_hash","userAccount","userPassword","checkToken","headers","authorization","decodedToken","jwtVerify","payload","params","findByPk","first_name","last_name","userError","Error","noTokenErro"],"mappings":"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","file":"user.middleware.js","sourcesContent":["import db from '../../../models/index';\nimport encrypt from '../../modules/encrypt';\nimport jw from '../../modules/jwtauth';\n\n// Create a new user on signup after checking existance in DB\nconst createUser = async (req, res, next) => {\n  try {\n    // Configure passed object to controller - DONE\n    // Runs createUser Hook before creating the User\n    // Hook checks if user exists and hashes password\n    const data = await db.UserAccount.create(req.body);\n    // JWT token generation\n    const generatedToken = await jw.jwtSign({\n      id: data.id,\n      status: 'user',\n    });\n    data.exists = false;\n    res.locals.data = {\n      token: generatedToken,\n      id: data.id,\n      user_existed: data.exists,\n    };\n  } catch (err) {\n    next(err);\n  }\n  next();\n};\n\n// Check if user exists and provided correct password\nconst loginUser = async (req, res, next) => {\n  try {\n    // Check UserAccount already exists in DB\n    const userCheck = await db.UserAccount.findOne({ where: { email: req.body.email } });\n    // If UserAccount is registered, pass it to check password.\n    if (userCheck) {\n      const isRegistered = await encrypt.checkUserAccountPass(req.body.password_hash, userCheck.password_hash);\n      if (isRegistered) {\n        // JWT token generation\n        const generatedToken = await jw.jwtSign({\n          id: userCheck.id,\n          status: 'user',\n        });\n        // Return UserAccount and password correct\n        res.locals.data = {\n          userAccount: true,\n          userPassword: true,\n          token: generatedToken,\n        };\n      } else {\n        // Return UserAccount exists, password wrong, empty user\n        res.locals.data = {\n          userAccount: true,\n          userPassword: false,\n          token: {},\n        };\n      }\n    } else {\n      // Return UserAccount is invalid, empty user\n      res.locals.data = {\n        userAccount: false,\n        userPassword: false,\n        token: {},\n      };\n    }\n  } catch (err) {\n    next(err);\n  }\n  next();\n};\n\nconst checkToken = async (req, res, next) => {\n  try {\n    // Get the decoded token from jwtVerify\n    if (req.headers.authorization) {\n      const decodedToken = await jw.jwtVerify(req.headers.authorization);\n      // Check user exists in Database\n      // Returns userID and email\n      if (decodedToken.payload.id === req.params.id) {\n        const data = await db.UserAccount.findByPk(decodedToken.payload.id);\n        if (data) {\n          // Configure passed object to the controller\n          res.locals.data = {\n            id: data.id,\n            first_name: data.first_name,\n            last_name: data.last_name,\n            email: data.email,\n          };\n        }\n      } else {\n        const userError = new Error('JWT compromised');\n        throw userError;\n      }\n    } else {\n      const noTokenErro = new Error('No Token');\n      throw noTokenErro;\n    }\n  } catch (err) {\n    next(err);\n  }\n  next();\n};\n\nexport default {\n  createUser,\n  loginUser,\n  checkToken,\n};"]}