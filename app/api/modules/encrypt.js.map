{"version":3,"sources":["../../../src/api/modules/encrypt.js"],"names":["saltRounds","parseInt","process","env","SALT_ROUNDS","pepper","PEPPER","addPepper","toHMAC","Error","hmac","crypto","createHmac","update","digest","comparePassword","plainPassword","hash","pepperedPassword","truth","bcrypt","compare","err","hashPassword","clientUserAcc","password_hash","dataSalt","genSalt","password_salt","dataHash","password_strength","checkUserAccountPass","plain","isRegistered"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,MAAMA,aAAaC,SAASC,QAAQC,GAAR,CAAYC,WAArB,EAAkC,EAAlC,CAAnB;AACA,MAAMC,SAASH,QAAQC,GAAR,CAAYG,MAA3B;;AAEA;AACA,MAAMC,YAAaC,MAAD,IAAY;AAC5B,MAAI,CAACH,MAAL,EAAa;AACX,UAAM,IAAII,KAAJ,CAAU,6BAAV,CAAN;AACD;AACD,QAAMC,OAAOC,iBAAOC,UAAP,CAAkB,MAAlB,EAA0BP,MAA1B,CAAb;AACAK,OAAKG,MAAL,CAAYL,MAAZ;AACA,SAAOE,KAAKI,MAAL,CAAY,KAAZ,CAAP;AACD,CAPD;;AASA,MAAMC,kBAAkB,OAAOC,aAAP,EAAsBC,IAAtB,KAA+B;AACrD;AACA,QAAMC,mBAAmBX,UAAUS,aAAV,CAAzB;AACA,MAAI;AACF,UAAMG,QAAQ,MAAMC,iBAAOC,OAAP,CAAeH,gBAAf,EAAiCD,IAAjC,CAApB;AACA,WAAOE,KAAP;AACD,GAHD,CAGE,OAAOG,GAAP,EAAY;AACZ,UAAOA,GAAP;AACD;AACF,CATD;;AAWA;AACA;AACA,MAAMC,eAAe,MAAOC,aAAP,IAAyB;AAC5C;AACA,QAAMN,mBAAmBX,UAAUiB,cAAcC,aAAxB,CAAzB;AACA,MAAI;AACF;AACA,UAAMC,WAAW,MAAMN,iBAAOO,OAAP,CAAe3B,UAAf,CAAvB;AACAwB,kBAAcI,aAAd,GAA8BF,QAA9B;AACA;AACA,UAAMG,WAAW,MAAMT,iBAAOH,IAAP,CAAYC,gBAAZ,EAA8BQ,QAA9B,CAAvB;AACAF,kBAAcC,aAAd,GAA8BI,QAA9B;AACAL,kBAAcM,iBAAd,GAAkC9B,UAAlC;AACD,GARD,CAQE,OAAOsB,GAAP,EAAY;AACZ,UAAOA,GAAP;AACD;AACD;AACA,SAAOE,aAAP;AACD,CAhBD;;AAkBA;AACA,MAAMO,uBAAuB,OAAOC,KAAP,EAAcf,IAAd,KAAuB;AAClD,MAAIgB,eAAe,KAAnB;AACA,MAAI;AACFA,mBAAe,MAAMlB,gBAAgBiB,KAAhB,EAAuBf,IAAvB,CAArB;AACD,GAFD,CAEE,OAAOK,GAAP,EAAY;AACZ,UAAMA,GAAN;AACD;AACD,SAAOW,YAAP;AACD,CARD;;kBAUe;AACbV,cADa;AAEbR,iBAFa;AAGbf,YAHa;AAIb+B;AAJa,C;;AAQf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"encrypt.js","sourcesContent":["import bcrypt from 'bcrypt';\nimport crypto from 'crypto';\n\nconst saltRounds = parseInt(process.env.SALT_ROUNDS, 10);\nconst pepper = process.env.PEPPER;\n\n// adds a pepper from server and returns a fixed length password.\nconst addPepper = (toHMAC) => {\n  if (!pepper) {\n    throw new Error('No internal Password hasher');\n  }\n  const hmac = crypto.createHmac('sha1', pepper);\n  hmac.update(toHMAC);\n  return hmac.digest('hex');\n};\n\nconst comparePassword = async (plainPassword, hash) => {\n  // uses function addPepper to pepper the password before checking equality.\n  const pepperedPassword = addPepper(plainPassword);\n  try {\n    const truth = await bcrypt.compare(pepperedPassword, hash);\n    return truth;\n  } catch (err) {\n    throw (err);\n  }\n};\n\n// Returns a promise with updated object with new keys\n// password_salt and password_hash\nconst hashPassword = async (clientUserAcc) => {\n  // uses function addPepper to pepper the password before checking equality.\n  const pepperedPassword = addPepper(clientUserAcc.password_hash);\n  try {\n    // Creates salt and adds it to the clientUserAcc\n    const dataSalt = await bcrypt.genSalt(saltRounds);\n    clientUserAcc.password_salt = dataSalt;\n    // Hashes password and adds it to ClientUserAcc\n    const dataHash = await bcrypt.hash(pepperedPassword, dataSalt);\n    clientUserAcc.password_hash = dataHash;\n    clientUserAcc.password_strength = saltRounds;\n  } catch (err) {\n    throw (err);\n  }\n  // Returns a Promise of the ClientUserAccount\n  return clientUserAcc;\n};\n\n// Check for account password - used in UserAccount middleware\nconst checkUserAccountPass = async (plain, hash) => {\n  let isRegistered = false;\n  try {\n    isRegistered = await comparePassword(plain, hash);\n  } catch (err) {\n    throw err;\n  }\n  return isRegistered;\n};\n\nexport default {\n  hashPassword,\n  comparePassword,\n  saltRounds,\n  checkUserAccountPass,\n};\n\n\n// // For local testing promise based bcrypt not used\n// genSalt().then((salt) => {\n//   genHash('rami', salt)\n//     .then((myHash) => {\n//       compareHash('rami', myHash)\n//         .then(data => console.log(data))\n//         .catch(err => console.log(err));\n//     }).catch(err => console.log(err));\n// }).catch(err => console.log(err));\n\n// const myObj = {\n//   password: '123',\n// };\n\n// hashPassword(myObj)\n//   .then((data) => {\n//     comparePassword(myObj.password, data.password_hash)\n//       .then(truth => console.log(truth))\n//       .catch(err => console.log('compare', err));\n//   })\n//   .catch(err => console.log('hash', err));"]}