{"version":3,"sources":["../../../src/api/modules/jwtauth.js"],"names":["jwtSecret","process","env","JWT_SECRET","jwtSign","payload","Promise","resolve","reject","jwt","sign","expiresIn","Math","floor","Date","now","err","genToken","jwtVerify","token","tokenToCheck","split","verify","decoded","console","log"],"mappings":";;;;;;AAAA;;;;;;AAEA,MAAMA,YAAYC,QAAQC,GAAR,CAAYC,UAA9B;;AAEA;AACA,MAAMC,UAAUC,WAAW,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC1DC,yBAAIC,IAAJ,CAAS,EAAEL,OAAF,EAAT,EAAsBL,SAAtB,EAAiC;AAC/BW,eAAWC,KAAKC,KAAL,CAAWC,KAAKC,GAAL,KAAa,IAAxB,CADoB,CACW;AADX,GAAjC,EAGA,CAACC,GAAD,EAAMC,QAAN,KAAmB;AACjB,QAAID,GAAJ,EAAS;AACPR,aAAOQ,GAAP;AACD,KAFD,MAEO;AACLT,cAAQU,QAAR;AACD;AACF,GATD;AAUD,CAX0B,CAA3B;;AAaA;AACA,MAAMC,YAAYC,SAAS,IAAIb,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC1D,QAAMY,eAAeD,MAAME,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAArB;AACAZ,yBAAIa,MAAJ,CAAWF,YAAX,EAAyBpB,SAAzB,EAAoC,CAACgB,GAAD,EAAMO,OAAN,KAAkB;AACpD,QAAIP,GAAJ,EAAS;AACPR,aAAOQ,GAAP;AACD,KAFD,MAEO;AACLQ,cAAQC,GAAR,CAAYF,OAAZ;AACAhB,cAAQgB,OAAR;AACD;AACF,GAPD;AAQD,CAV0B,CAA3B;;kBAYe,EAAEnB,OAAF,EAAWc,SAAX,E","file":"jwtauth.js","sourcesContent":["import jwt from 'jsonwebtoken';\n\nconst jwtSecret = process.env.JWT_SECRET;\n\n// Sign a JWT and return a promise with it\nconst jwtSign = payload => new Promise((resolve, reject) => {\n  jwt.sign({ payload }, jwtSecret, {\n    expiresIn: Math.floor(Date.now() / 1000), //+ (60 * 60),\n  },\n  (err, genToken) => {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(genToken);\n    }\n  });\n});\n\n// Verify token\nconst jwtVerify = token => new Promise((resolve, reject) => {\n  const tokenToCheck = token.split(' ')[1];\n  jwt.verify(tokenToCheck, jwtSecret, (err, decoded) => {\n    if (err) {\n      reject(err);\n    } else {\n      console.log(decoded);\n      resolve(decoded);\n    }\n  });\n});\n\nexport default { jwtSign, jwtVerify };"]}