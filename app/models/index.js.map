{"version":3,"sources":["../../src/models/index.js"],"names":["process","env","NODE_ENV","require","config","basename","path","__filename","db","sequelize","model","Sequelize","DATABASE_URL","dialect","protocol","logging","native","pool","max","min","sync","forceSync","operatorsAliases","DB_URI","fs","readdirSync","__dirname","filter","file","indexOf","slice","forEach","import","join","name","Object","keys","modelName","associate"],"mappings":";;;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAIA,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,KAA7B,EAAoCC,QAAQ,QAAR,EAAkBC,MAAlB;;AAEpC;AARA;AASA,MAAMC,WAAWC,eAAKD,QAAL,CAAcE,UAAd,CAAjB;AACA;AACA,MAAMC,KAAK,EAAX;AACA,IAAIC,SAAJ;AACA,IAAIC,KAAJ;;AAEA;AACA,IAAIV,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCF,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,IAAtE,EAA4E;AAC1E;AACAO,cAAY,IAAIE,mBAAJ,CAAcX,QAAQC,GAAR,CAAYW,YAA1B,EAAwC;AAClDC,aAAS,UADyC;AAElDC,cAAU,UAFwC;AAGlDC,aAAS,KAHyC,EAGlC;AAChBC,YAAQ,IAJ0C;AAKlDC,UAAM;AACJC,WAAK,CADD;AAEJC,WAAK;AAFD,KAL4C;AASlDC,UAAM,IAT4C;AAUlDC,eAAW,KAVuC;AAWlDC,sBAAkB;AAXgC,GAAxC,CAAZ;AAaD,CAfD,MAeO,IAAItB,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,KAA7B,EAAoC;AACzC;AACA;AACAO,cAAY,IAAIE,mBAAJ,CAAcX,QAAQC,GAAR,CAAYsB,MAA1B,EAAkC;AAC5CV,aAAS,UADmC;AAE5CC,cAAU,UAFkC;AAG5CC,aAAS,KAHmC,EAG5B;AAChBC,YAAQ,IAJoC;AAK5CC,UAAM;AACJC,WAAK,CADD;AAEJC,WAAK;AAFD,KALsC;AAS5CC,UAAM,IATsC;AAU5CC,eAAW,KAViC;AAW5CC,sBAAkB;AAX0B,GAAlC,CAAZ;AAaD;;AAED;AACA;AACA;;AAEAE,aACGC,WADH,CACeC,SADf,EAEGC,MAFH,CAEUC,QAASA,KAAKC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IAA8BD,SAASvB,QAAvC,IAAqDuB,KAAKE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAF1F,EAGGC,OAHH,CAGYH,IAAD,IAAU;AACjBlB,UAAQD,UAAUuB,MAAV,CAAiB1B,eAAK2B,IAAL,CAAUP,SAAV,EAAqBE,IAArB,CAAjB,CAAR;AACApB,KAAGE,MAAMwB,IAAT,IAAiBxB,KAAjB;AACD,CANH;;AAQAyB,OAAOC,IAAP,CAAY5B,EAAZ,EAAgBuB,OAAhB,CAAyBM,SAAD,IAAe;AACrC,MAAI7B,GAAG6B,SAAH,EAAcC,SAAlB,EAA6B;AAC3B9B,OAAG6B,SAAH,EAAcC,SAAd,CAAwB9B,EAAxB;AACD;AACF,CAJD;;AAMAA,GAAGC,SAAH,GAAeA,SAAf;AACAD,GAAGG,SAAH,GAAeA,mBAAf;;AAEA;AACA;kBACeH,E","file":"index.js","sourcesContent":["// Import filesystem to recognize where the models are\nimport fs from 'fs';\nimport path from 'path';\nimport Sequelize from 'sequelize';\n\n// Load dotenv environment variable DB_URI and PORT 3000\nif (process.env.NODE_ENV === 'dev') require('dotenv').config();\n\n// Set up the internals of sequelize\nconst basename = path.basename(__filename);\n// const config = require(`${__dirname}/../config/config.json`)[env];\nconst db = {};\nlet sequelize;\nlet model;\n\n// Check if the application is running in development or running on heroku\nif (process.env.NODE_ENV === 'production' || process.env.NODE_ENV === 'st') {\n  // the application is executed on Heroku ... use the postgres staging or production database\n  sequelize = new Sequelize(process.env.DATABASE_URL, {\n    dialect: 'postgres',\n    protocol: 'postgres',\n    logging: false, // false -- Check Logging and Sync options???\n    native: true,\n    pool: {\n      max: 5,\n      min: 0,\n    },\n    sync: true,\n    forceSync: false,\n    operatorsAliases: false,\n  });\n} else if (process.env.NODE_ENV === 'dev') {\n  // the application is executed on the local machine ... use postgres development\n  // DATABASE_DEV_URL\n  sequelize = new Sequelize(process.env.DB_URI, {\n    dialect: 'postgres',\n    protocol: 'postgres',\n    logging: false, // false -- Check Logging and Sync options???\n    native: true,\n    pool: {\n      max: 5,\n      min: 0,\n    },\n    sync: true,\n    forceSync: false,\n    operatorsAliases: false,\n  });\n}\n\n// Export the model object that is the exact similar to db object\n// Import this in the server.js file to run queries on the db based on models\n// Use the model object to create new rows in the database\n\nfs\n  .readdirSync(__dirname)\n  .filter(file => (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js'))\n  .forEach((file) => {\n    model = sequelize.import(path.join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach((modelName) => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\n// Export the database object\n// Use to Authenticate db in the server.js file, while use model to query db\nexport default db;"]}