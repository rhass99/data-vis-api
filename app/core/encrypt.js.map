{"version":3,"sources":["../../src/core/encrypt.js"],"names":["saltRounds","pepper","process","env","PEPPER","addPepper","plainPassword","Error","hmac","crypto","createHmac","update","digest","genSalt","rounds","Promise","resolve","reject","bcrypt","err","salt","genHash","pepperedPassword","then","dataSalt","hash","hashedPassword","catch","compareHash","dbHash","compare","result"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AAEA,MAAMA,aAAa,EAAnB;AACA,MAAMC,SAASC,QAAQC,GAAR,CAAYC,MAAZ,IAAsB,IAArC;;AAEA;AACA,MAAMC,YAAaC,aAAD,IAAmB;AACnC,MAAI,CAACL,MAAL,EAAa;AACX,UAAM,IAAIM,KAAJ,CAAU,wBAAV,CAAN;AACD;AACD,QAAMC,OAAOC,iBAAOC,UAAP,CAAkB,MAAlB,EAA0BT,MAA1B,CAAb;AACAO,OAAKG,MAAL,CAAYL,aAAZ;AACA,SAAOE,KAAKI,MAAL,CAAY,KAAZ,CAAP;AACD,CAPD;;AASA;AACA;AACA,MAAMC,UAAUC,UAAU,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACzDC,mBAAOL,OAAP,CAAeC,MAAf,EAAuB,CAACK,GAAD,EAAMC,IAAN,KAAe;AACpC,QAAID,GAAJ,EAASF,OAAOE,GAAP,EAAT,KACKH,QAAQI,IAAR;AACN,GAHD;AAID,CALyB,CAA1B;;AAOA;AACA,MAAMC,UAAUf,iBAAiB,IAAIS,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAChE;AACA,MAAIK,gBAAJ;AACA,MAAI;AACFA,uBAAmBjB,UAAUC,aAAV,CAAnB;AACD,GAFD,CAEE,OAAOa,GAAP,EAAY;AACZF,WAAOE,GAAP;AACD;AACD;AACAN,UAAQb,UAAR,EAAoBuB,IAApB,CAA0BC,QAAD,IAAc;AACrC;AACAN,qBAAOO,IAAP,CAAYH,gBAAZ,EAA8BE,QAA9B,EAAwC,CAACL,GAAD,EAAMO,cAAN,KAAyB;AAC/D,UAAIP,GAAJ,EAASF,OAAOE,GAAP,EAAT,KACKH,QAAQU,cAAR;AACN,KAHD;AAIA;AACD,GAPD,EAOGC,KAPH,CAOUR,GAAD,IAAS;AAChB,UAAM,IAAIZ,KAAJ,CAAU,uDAAV,EAAmEY,GAAnE,CAAN;AACD,GATD;AAUD,CAnBgC,CAAjC;;AAqBA;AACA,MAAMS,cAAc,CAACtB,aAAD,EAAgBuB,MAAhB,KAA2B,IAAId,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC9E;AACA,QAAMK,mBAAmBjB,UAAUC,aAAV,CAAzB;AACA;AACAY,mBAAOY,OAAP,CAAeR,gBAAf,EAAiCO,MAAjC,EAAyC,CAACV,GAAD,EAAMY,MAAN,KAAiB;AACxD,QAAIZ,GAAJ,EAASF,OAAOE,GAAP,EAAT,KACKH,QAAQe,MAAR;AACN,GAHD;AAID,CAR8C,CAA/C;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;QAGEV,O,GAAAA,O;QACAO,W,GAAAA,W","file":"encrypt.js","sourcesContent":["import bcrypt from 'bcrypt';\nimport crypto from 'crypto';\n\nconst saltRounds = 10;\nconst pepper = process.env.PEPPER || '11';\n\n// adds a pepper from server and returns a fixed length password.\nconst addPepper = (plainPassword) => {\n  if (!pepper) {\n    throw new Error('No internal pepper set');\n  }\n  const hmac = crypto.createHmac('sha1', pepper);\n  hmac.update(plainPassword);\n  return hmac.digest('hex');\n};\n\n// returns a promise with the generated salt\n// need to save salt to database\nconst genSalt = rounds => new Promise((resolve, reject) => {\n  bcrypt.genSalt(rounds, (err, salt) => {\n    if (err) reject(err);\n    else resolve(salt);\n  });\n});\n\n// returns a promise with password hash from plain password.\nconst genHash = plainPassword => new Promise((resolve, reject) => {\n  // uses function addPepper to pepper the password before salting it\n  let pepperedPassword;\n  try {\n    pepperedPassword = addPepper(plainPassword);\n  } catch (err) {\n    reject(err);\n  }\n  // generates Salt and then uses it to hash the peppered password\n  genSalt(saltRounds).then((dataSalt) => {\n    // uses the generated salt and the peppered password to return a hashed password to store in DB\n    bcrypt.hash(pepperedPassword, dataSalt, (err, hashedPassword) => {\n      if (err) reject(err);\n      else resolve(hashedPassword);\n    });\n    // catches the error from the genSalt function\n  }).catch((err) => {\n    throw new Error('function genSalt - encrypt.js, Salt generation failed', err);\n  });\n});\n\n// compares plain password with stored hash from DB returns promise with boolean value\nconst compareHash = (plainPassword, dbHash) => new Promise((resolve, reject) => {\n  // uses function addPepper to pepper the password before checking equality.\n  const pepperedPassword = addPepper(plainPassword);\n  // compares peppered password with the password from DB\n  bcrypt.compare(pepperedPassword, dbHash, (err, result) => {\n    if (err) reject(err);\n    else resolve(result);\n  });\n});\n\n// For local testing\n// genHash('rami')\n//   .then((myHash) => {\n//     compareHash('rami', myHash)\n//       .then(data => console.log(data))\n//       .catch(err => console.log(err));\n//   }).catch(err => console.log(err));\n\nexport {\n  genHash,\n  compareHash,\n};"]}